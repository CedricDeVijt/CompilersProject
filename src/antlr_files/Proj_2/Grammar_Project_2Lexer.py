# Generated from grammars/Grammar_Project_2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,241,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,
        1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,
        1,29,1,30,1,30,1,30,5,30,169,8,30,10,30,12,30,172,9,30,3,30,174,
        8,30,1,31,4,31,177,8,31,11,31,12,31,178,1,31,1,31,4,31,183,8,31,
        11,31,12,31,184,3,31,187,8,31,1,32,1,32,1,32,1,32,1,33,4,33,194,
        8,33,11,33,12,33,195,1,33,1,33,1,34,1,34,5,34,202,8,34,10,34,12,
        34,205,9,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,3,37,215,8,37,
        1,38,1,38,1,38,1,38,5,38,221,8,38,10,38,12,38,224,9,38,1,38,1,38,
        1,38,1,38,1,38,1,39,1,39,1,39,1,39,5,39,235,8,39,10,39,12,39,238,
        9,39,1,39,1,39,1,222,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,1,0,7,1,
        0,49,57,1,0,48,57,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,3,
        0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,
        250,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        1,81,1,0,0,0,3,85,1,0,0,0,5,90,1,0,0,0,7,92,1,0,0,0,9,98,1,0,0,0,
        11,104,1,0,0,0,13,109,1,0,0,0,15,111,1,0,0,0,17,113,1,0,0,0,19,115,
        1,0,0,0,21,117,1,0,0,0,23,119,1,0,0,0,25,121,1,0,0,0,27,123,1,0,
        0,0,29,125,1,0,0,0,31,127,1,0,0,0,33,129,1,0,0,0,35,131,1,0,0,0,
        37,134,1,0,0,0,39,137,1,0,0,0,41,140,1,0,0,0,43,143,1,0,0,0,45,146,
        1,0,0,0,47,149,1,0,0,0,49,151,1,0,0,0,51,153,1,0,0,0,53,155,1,0,
        0,0,55,158,1,0,0,0,57,161,1,0,0,0,59,163,1,0,0,0,61,173,1,0,0,0,
        63,176,1,0,0,0,65,188,1,0,0,0,67,193,1,0,0,0,69,199,1,0,0,0,71,206,
        1,0,0,0,73,209,1,0,0,0,75,214,1,0,0,0,77,216,1,0,0,0,79,230,1,0,
        0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,2,1,0,0,0,
        85,86,5,109,0,0,86,87,5,97,0,0,87,88,5,105,0,0,88,89,5,110,0,0,89,
        4,1,0,0,0,90,91,5,61,0,0,91,6,1,0,0,0,92,93,5,99,0,0,93,94,5,111,
        0,0,94,95,5,110,0,0,95,96,5,115,0,0,96,97,5,116,0,0,97,8,1,0,0,0,
        98,99,5,102,0,0,99,100,5,108,0,0,100,101,5,111,0,0,101,102,5,97,
        0,0,102,103,5,116,0,0,103,10,1,0,0,0,104,105,5,99,0,0,105,106,5,
        104,0,0,106,107,5,97,0,0,107,108,5,114,0,0,108,12,1,0,0,0,109,110,
        5,40,0,0,110,14,1,0,0,0,111,112,5,41,0,0,112,16,1,0,0,0,113,114,
        5,123,0,0,114,18,1,0,0,0,115,116,5,125,0,0,116,20,1,0,0,0,117,118,
        5,43,0,0,118,22,1,0,0,0,119,120,5,45,0,0,120,24,1,0,0,0,121,122,
        5,42,0,0,122,26,1,0,0,0,123,124,5,47,0,0,124,28,1,0,0,0,125,126,
        5,37,0,0,126,30,1,0,0,0,127,128,5,62,0,0,128,32,1,0,0,0,129,130,
        5,60,0,0,130,34,1,0,0,0,131,132,5,62,0,0,132,133,5,61,0,0,133,36,
        1,0,0,0,134,135,5,60,0,0,135,136,5,61,0,0,136,38,1,0,0,0,137,138,
        5,61,0,0,138,139,5,61,0,0,139,40,1,0,0,0,140,141,5,33,0,0,141,142,
        5,61,0,0,142,42,1,0,0,0,143,144,5,60,0,0,144,145,5,60,0,0,145,44,
        1,0,0,0,146,147,5,62,0,0,147,148,5,62,0,0,148,46,1,0,0,0,149,150,
        5,38,0,0,150,48,1,0,0,0,151,152,5,124,0,0,152,50,1,0,0,0,153,154,
        5,94,0,0,154,52,1,0,0,0,155,156,5,38,0,0,156,157,5,38,0,0,157,54,
        1,0,0,0,158,159,5,124,0,0,159,160,5,124,0,0,160,56,1,0,0,0,161,162,
        5,33,0,0,162,58,1,0,0,0,163,164,5,59,0,0,164,60,1,0,0,0,165,174,
        5,48,0,0,166,170,7,0,0,0,167,169,7,1,0,0,168,167,1,0,0,0,169,172,
        1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,174,1,0,0,0,172,170,
        1,0,0,0,173,165,1,0,0,0,173,166,1,0,0,0,174,62,1,0,0,0,175,177,7,
        1,0,0,176,175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,
        0,0,0,179,186,1,0,0,0,180,182,5,46,0,0,181,183,7,1,0,0,182,181,1,
        0,0,0,183,184,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,
        0,0,0,186,180,1,0,0,0,186,187,1,0,0,0,187,64,1,0,0,0,188,189,5,39,
        0,0,189,190,7,2,0,0,190,191,5,39,0,0,191,66,1,0,0,0,192,194,7,3,
        0,0,193,192,1,0,0,0,194,195,1,0,0,0,195,193,1,0,0,0,195,196,1,0,
        0,0,196,197,1,0,0,0,197,198,6,33,0,0,198,68,1,0,0,0,199,203,7,4,
        0,0,200,202,7,5,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,
        0,0,203,204,1,0,0,0,204,70,1,0,0,0,205,203,1,0,0,0,206,207,5,43,
        0,0,207,208,5,43,0,0,208,72,1,0,0,0,209,210,5,45,0,0,210,211,5,45,
        0,0,211,74,1,0,0,0,212,215,3,79,39,0,213,215,3,77,38,0,214,212,1,
        0,0,0,214,213,1,0,0,0,215,76,1,0,0,0,216,217,5,47,0,0,217,218,5,
        42,0,0,218,222,1,0,0,0,219,221,9,0,0,0,220,219,1,0,0,0,221,224,1,
        0,0,0,222,223,1,0,0,0,222,220,1,0,0,0,223,225,1,0,0,0,224,222,1,
        0,0,0,225,226,5,42,0,0,226,227,5,47,0,0,227,228,1,0,0,0,228,229,
        6,38,0,0,229,78,1,0,0,0,230,231,5,47,0,0,231,232,5,47,0,0,232,236,
        1,0,0,0,233,235,8,6,0,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,
        1,0,0,0,236,237,1,0,0,0,237,239,1,0,0,0,238,236,1,0,0,0,239,240,
        6,39,0,0,240,80,1,0,0,0,11,0,170,173,178,184,186,195,203,214,222,
        236,1,6,0,0
    ]

class Grammar_Project_2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    LPAREN = 7
    RPAREN = 8
    LBRACE = 9
    RBRACE = 10
    PLUS = 11
    MINUS = 12
    MULT = 13
    DIV = 14
    MOD = 15
    GREATER_THAN = 16
    LESS_THAN = 17
    GREATER_EQUAL = 18
    LESS_EQUAL = 19
    EQUALS = 20
    NOT_EQUAL = 21
    SHIFT_LEFT = 22
    SHIFT_RIGHT = 23
    BITWISE_AND = 24
    BITWISE_OR = 25
    BITWISE_XOR = 26
    LOGICAL_AND = 27
    LOGICAL_OR = 28
    LOGICAL_NOT = 29
    SEMICOLON = 30
    INT = 31
    FLOAT = 32
    CHAR = 33
    WHITESPACE = 34
    IDENTIFIER = 35
    INCREMENT = 36
    DECREMENT = 37
    COMMENT = 38
    BLOCKCOMMENT = 39
    LINECOMMENT = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'main'", "'='", "'const'", "'float'", "'char'", "'('", 
            "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", 
            "'<'", "'>='", "'<='", "'=='", "'!='", "'<<'", "'>>'", "'&'", 
            "'|'", "'^'", "'&&'", "'||'", "'!'", "';'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
            "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
            "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", "LOGICAL_OR", 
            "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", "WHITESPACE", 
            "IDENTIFIER", "INCREMENT", "DECREMENT", "COMMENT", "BLOCKCOMMENT", 
            "LINECOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", 
                  "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
                  "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
                  "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", 
                  "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", 
                  "CHAR", "WHITESPACE", "IDENTIFIER", "INCREMENT", "DECREMENT", 
                  "COMMENT", "BLOCKCOMMENT", "LINECOMMENT" ]

    grammarFileName = "Grammar_Project_2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


