# Generated from grammars/Grammar_Project_2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,191,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
        12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,
        18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,
        22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,
        28,1,28,1,29,1,29,1,30,4,30,157,8,30,11,30,12,30,158,1,31,4,31,162,
        8,31,11,31,12,31,163,1,31,1,31,4,31,168,8,31,11,31,12,31,169,3,31,
        172,8,31,1,32,1,32,1,32,1,32,1,33,4,33,179,8,33,11,33,12,33,180,
        1,33,1,33,1,34,1,34,5,34,187,8,34,10,34,12,34,190,9,34,0,0,35,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,
        0,5,1,0,48,57,3,0,48,57,65,90,97,122,3,0,9,10,13,13,32,32,2,0,65,
        90,97,122,4,0,48,57,65,90,95,95,97,122,196,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,1,71,1,0,0,0,3,75,1,0,0,0,
        5,80,1,0,0,0,7,82,1,0,0,0,9,88,1,0,0,0,11,94,1,0,0,0,13,99,1,0,0,
        0,15,101,1,0,0,0,17,103,1,0,0,0,19,105,1,0,0,0,21,107,1,0,0,0,23,
        109,1,0,0,0,25,111,1,0,0,0,27,113,1,0,0,0,29,115,1,0,0,0,31,117,
        1,0,0,0,33,119,1,0,0,0,35,121,1,0,0,0,37,124,1,0,0,0,39,127,1,0,
        0,0,41,130,1,0,0,0,43,133,1,0,0,0,45,136,1,0,0,0,47,139,1,0,0,0,
        49,141,1,0,0,0,51,143,1,0,0,0,53,145,1,0,0,0,55,148,1,0,0,0,57,151,
        1,0,0,0,59,153,1,0,0,0,61,156,1,0,0,0,63,161,1,0,0,0,65,173,1,0,
        0,0,67,178,1,0,0,0,69,184,1,0,0,0,71,72,5,105,0,0,72,73,5,110,0,
        0,73,74,5,116,0,0,74,2,1,0,0,0,75,76,5,109,0,0,76,77,5,97,0,0,77,
        78,5,105,0,0,78,79,5,110,0,0,79,4,1,0,0,0,80,81,5,61,0,0,81,6,1,
        0,0,0,82,83,5,99,0,0,83,84,5,111,0,0,84,85,5,110,0,0,85,86,5,115,
        0,0,86,87,5,116,0,0,87,8,1,0,0,0,88,89,5,102,0,0,89,90,5,108,0,0,
        90,91,5,111,0,0,91,92,5,97,0,0,92,93,5,116,0,0,93,10,1,0,0,0,94,
        95,5,99,0,0,95,96,5,104,0,0,96,97,5,97,0,0,97,98,5,114,0,0,98,12,
        1,0,0,0,99,100,5,40,0,0,100,14,1,0,0,0,101,102,5,41,0,0,102,16,1,
        0,0,0,103,104,5,123,0,0,104,18,1,0,0,0,105,106,5,125,0,0,106,20,
        1,0,0,0,107,108,5,43,0,0,108,22,1,0,0,0,109,110,5,45,0,0,110,24,
        1,0,0,0,111,112,5,42,0,0,112,26,1,0,0,0,113,114,5,47,0,0,114,28,
        1,0,0,0,115,116,5,37,0,0,116,30,1,0,0,0,117,118,5,62,0,0,118,32,
        1,0,0,0,119,120,5,60,0,0,120,34,1,0,0,0,121,122,5,62,0,0,122,123,
        5,61,0,0,123,36,1,0,0,0,124,125,5,60,0,0,125,126,5,61,0,0,126,38,
        1,0,0,0,127,128,5,61,0,0,128,129,5,61,0,0,129,40,1,0,0,0,130,131,
        5,33,0,0,131,132,5,61,0,0,132,42,1,0,0,0,133,134,5,60,0,0,134,135,
        5,60,0,0,135,44,1,0,0,0,136,137,5,62,0,0,137,138,5,62,0,0,138,46,
        1,0,0,0,139,140,5,38,0,0,140,48,1,0,0,0,141,142,5,124,0,0,142,50,
        1,0,0,0,143,144,5,94,0,0,144,52,1,0,0,0,145,146,5,38,0,0,146,147,
        5,38,0,0,147,54,1,0,0,0,148,149,5,124,0,0,149,150,5,124,0,0,150,
        56,1,0,0,0,151,152,5,33,0,0,152,58,1,0,0,0,153,154,5,59,0,0,154,
        60,1,0,0,0,155,157,7,0,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,
        1,0,0,0,158,159,1,0,0,0,159,62,1,0,0,0,160,162,7,0,0,0,161,160,1,
        0,0,0,162,163,1,0,0,0,163,161,1,0,0,0,163,164,1,0,0,0,164,171,1,
        0,0,0,165,167,5,46,0,0,166,168,7,0,0,0,167,166,1,0,0,0,168,169,1,
        0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,165,1,
        0,0,0,171,172,1,0,0,0,172,64,1,0,0,0,173,174,5,39,0,0,174,175,7,
        1,0,0,175,176,5,39,0,0,176,66,1,0,0,0,177,179,7,2,0,0,178,177,1,
        0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,182,1,
        0,0,0,182,183,6,33,0,0,183,68,1,0,0,0,184,188,7,3,0,0,185,187,7,
        4,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,
        0,0,0,189,70,1,0,0,0,190,188,1,0,0,0,7,0,158,163,169,171,180,188,
        1,6,0,0
    ]

class Grammar_Project_2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    LPAREN = 7
    RPAREN = 8
    LBRACE = 9
    RBRACE = 10
    PLUS = 11
    MINUS = 12
    MULT = 13
    DIV = 14
    MOD = 15
    GREATER_THAN = 16
    LESS_THAN = 17
    GREATER_EQUAL = 18
    LESS_EQUAL = 19
    EQUALS = 20
    NOT_EQUAL = 21
    SHIFT_LEFT = 22
    SHIFT_RIGHT = 23
    BITWISE_AND = 24
    BITWISE_OR = 25
    BITWISE_XOR = 26
    LOGICAL_AND = 27
    LOGICAL_OR = 28
    LOGICAL_NOT = 29
    SEMICOLON = 30
    INT = 31
    FLOAT = 32
    CHAR = 33
    WHITESPACE = 34
    IDENTIFIER = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'main'", "'='", "'const'", "'float'", "'char'", "'('", 
            "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", 
            "'<'", "'>='", "'<='", "'=='", "'!='", "'<<'", "'>>'", "'&'", 
            "'|'", "'^'", "'&&'", "'||'", "'!'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
            "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
            "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", "LOGICAL_OR", 
            "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", "WHITESPACE", 
            "IDENTIFIER" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "LPAREN", 
                  "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", 
                  "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
                  "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
                  "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", 
                  "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", 
                  "CHAR", "WHITESPACE", "IDENTIFIER" ]

    grammarFileName = "Grammar_Project_2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


