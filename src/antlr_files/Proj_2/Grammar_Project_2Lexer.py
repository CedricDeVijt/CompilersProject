# Generated from grammars/Grammar_Project_2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,198,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,2,1,2,1,3,1,3,5,3,88,8,3,10,3,12,3,91,9,3,1,4,1,4,1,5,
        1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
        1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,
        1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        4,28,150,8,28,11,28,12,28,151,1,29,4,29,155,8,29,11,29,12,29,156,
        1,29,1,29,4,29,161,8,29,11,29,12,29,162,3,29,165,8,29,1,30,1,30,
        1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,4,35,193,
        8,35,11,35,12,35,194,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,4,2,0,65,90,97,122,
        3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,32,203,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,1,73,1,0,0,0,3,78,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,92,1,0,0,
        0,11,94,1,0,0,0,13,96,1,0,0,0,15,98,1,0,0,0,17,100,1,0,0,0,19,102,
        1,0,0,0,21,104,1,0,0,0,23,106,1,0,0,0,25,108,1,0,0,0,27,110,1,0,
        0,0,29,112,1,0,0,0,31,114,1,0,0,0,33,117,1,0,0,0,35,120,1,0,0,0,
        37,123,1,0,0,0,39,126,1,0,0,0,41,129,1,0,0,0,43,132,1,0,0,0,45,134,
        1,0,0,0,47,136,1,0,0,0,49,138,1,0,0,0,51,141,1,0,0,0,53,144,1,0,
        0,0,55,146,1,0,0,0,57,149,1,0,0,0,59,154,1,0,0,0,61,166,1,0,0,0,
        63,170,1,0,0,0,65,174,1,0,0,0,67,180,1,0,0,0,69,185,1,0,0,0,71,192,
        1,0,0,0,73,74,5,105,0,0,74,75,5,110,0,0,75,76,5,116,0,0,76,77,5,
        32,0,0,77,2,1,0,0,0,78,79,5,109,0,0,79,80,5,97,0,0,80,81,5,105,0,
        0,81,82,5,110,0,0,82,4,1,0,0,0,83,84,5,61,0,0,84,6,1,0,0,0,85,89,
        7,0,0,0,86,88,7,1,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,87,1,0,0,0,
        89,90,1,0,0,0,90,8,1,0,0,0,91,89,1,0,0,0,92,93,5,40,0,0,93,10,1,
        0,0,0,94,95,5,41,0,0,95,12,1,0,0,0,96,97,5,123,0,0,97,14,1,0,0,0,
        98,99,5,125,0,0,99,16,1,0,0,0,100,101,5,43,0,0,101,18,1,0,0,0,102,
        103,5,45,0,0,103,20,1,0,0,0,104,105,5,42,0,0,105,22,1,0,0,0,106,
        107,5,47,0,0,107,24,1,0,0,0,108,109,5,37,0,0,109,26,1,0,0,0,110,
        111,5,62,0,0,111,28,1,0,0,0,112,113,5,60,0,0,113,30,1,0,0,0,114,
        115,5,62,0,0,115,116,5,61,0,0,116,32,1,0,0,0,117,118,5,60,0,0,118,
        119,5,61,0,0,119,34,1,0,0,0,120,121,5,61,0,0,121,122,5,61,0,0,122,
        36,1,0,0,0,123,124,5,33,0,0,124,125,5,61,0,0,125,38,1,0,0,0,126,
        127,5,60,0,0,127,128,5,60,0,0,128,40,1,0,0,0,129,130,5,62,0,0,130,
        131,5,62,0,0,131,42,1,0,0,0,132,133,5,38,0,0,133,44,1,0,0,0,134,
        135,5,124,0,0,135,46,1,0,0,0,136,137,5,94,0,0,137,48,1,0,0,0,138,
        139,5,38,0,0,139,140,5,38,0,0,140,50,1,0,0,0,141,142,5,124,0,0,142,
        143,5,124,0,0,143,52,1,0,0,0,144,145,5,33,0,0,145,54,1,0,0,0,146,
        147,5,59,0,0,147,56,1,0,0,0,148,150,7,2,0,0,149,148,1,0,0,0,150,
        151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,58,1,0,0,0,153,155,
        7,2,0,0,154,153,1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,
        1,0,0,0,157,164,1,0,0,0,158,160,5,46,0,0,159,161,7,2,0,0,160,159,
        1,0,0,0,161,162,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,
        1,0,0,0,164,158,1,0,0,0,164,165,1,0,0,0,165,60,1,0,0,0,166,167,5,
        39,0,0,167,168,7,1,0,0,168,169,5,39,0,0,169,62,1,0,0,0,170,171,5,
        105,0,0,171,172,5,110,0,0,172,173,5,116,0,0,173,64,1,0,0,0,174,175,
        5,102,0,0,175,176,5,108,0,0,176,177,5,111,0,0,177,178,5,97,0,0,178,
        179,5,116,0,0,179,66,1,0,0,0,180,181,5,99,0,0,181,182,5,104,0,0,
        182,183,5,97,0,0,183,184,5,114,0,0,184,68,1,0,0,0,185,186,5,99,0,
        0,186,187,5,111,0,0,187,188,5,110,0,0,188,189,5,115,0,0,189,190,
        5,116,0,0,190,70,1,0,0,0,191,193,7,3,0,0,192,191,1,0,0,0,193,194,
        1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,197,
        6,35,0,0,197,72,1,0,0,0,7,0,89,151,156,162,164,194,1,6,0,0
    ]

class Grammar_Project_2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    IDENTIFIER = 4
    LPAREN = 5
    RPAREN = 6
    LBRACE = 7
    RBRACE = 8
    PLUS = 9
    MINUS = 10
    MULT = 11
    DIV = 12
    MOD = 13
    GREATER_THAN = 14
    LESS_THAN = 15
    GREATER_EQUAL = 16
    LESS_EQUAL = 17
    EQUALS = 18
    NOT_EQUAL = 19
    SHIFT_LEFT = 20
    SHIFT_RIGHT = 21
    BITWISE_AND = 22
    BITWISE_OR = 23
    BITWISE_XOR = 24
    LOGICAL_AND = 25
    LOGICAL_OR = 26
    LOGICAL_NOT = 27
    SEMICOLON = 28
    INT = 29
    FLOAT = 30
    CHAR = 31
    INTTYPE = 32
    FLOATTYPE = 33
    CHARTYPE = 34
    CONST = 35
    WHITESPACE = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int '", "'main'", "'='", "'('", "')'", "'{'", "'}'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", "'>='", "'<='", "'=='", 
            "'!='", "'<<'", "'>>'", "'&'", "'|'", "'^'", "'&&'", "'||'", 
            "'!'", "';'", "'int'", "'float'", "'char'", "'const'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "GREATER_THAN", "LESS_THAN", 
            "GREATER_EQUAL", "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", 
            "SHIFT_RIGHT", "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", 
            "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", 
            "INTTYPE", "FLOATTYPE", "CHARTYPE", "CONST", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "IDENTIFIER", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
                  "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", "LESS_EQUAL", 
                  "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", "BITWISE_AND", 
                  "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", "LOGICAL_OR", 
                  "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", "INTTYPE", 
                  "FLOATTYPE", "CHARTYPE", "CONST", "WHITESPACE" ]

    grammarFileName = "Grammar_Project_2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


