# Generated from grammars/Grammar_Project_2.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,189,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,5,2,81,
        8,2,10,2,12,2,84,9,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,
        1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,
        14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,
        19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,4,27,143,8,27,11,27,12,27,144,1,
        28,4,28,148,8,28,11,28,12,28,149,1,28,1,28,4,28,154,8,28,11,28,12,
        28,155,3,28,158,8,28,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,
        1,33,1,34,4,34,184,8,34,11,34,12,34,185,1,34,1,34,0,0,35,1,1,3,2,
        5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
        15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,
        26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,1,0,4,2,
        0,65,90,97,122,3,0,48,57,65,90,97,122,1,0,48,57,3,0,9,10,13,13,32,
        32,194,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,1,71,1,0,0,0,3,76,1,0,0,0,5,78,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,
        0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,
        1,0,0,0,21,99,1,0,0,0,23,101,1,0,0,0,25,103,1,0,0,0,27,105,1,0,0,
        0,29,107,1,0,0,0,31,110,1,0,0,0,33,113,1,0,0,0,35,116,1,0,0,0,37,
        119,1,0,0,0,39,122,1,0,0,0,41,125,1,0,0,0,43,127,1,0,0,0,45,129,
        1,0,0,0,47,131,1,0,0,0,49,134,1,0,0,0,51,137,1,0,0,0,53,139,1,0,
        0,0,55,142,1,0,0,0,57,147,1,0,0,0,59,159,1,0,0,0,61,161,1,0,0,0,
        63,165,1,0,0,0,65,171,1,0,0,0,67,176,1,0,0,0,69,183,1,0,0,0,71,72,
        5,109,0,0,72,73,5,97,0,0,73,74,5,105,0,0,74,75,5,110,0,0,75,2,1,
        0,0,0,76,77,5,61,0,0,77,4,1,0,0,0,78,82,7,0,0,0,79,81,7,1,0,0,80,
        79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,6,1,0,0,
        0,84,82,1,0,0,0,85,86,5,40,0,0,86,8,1,0,0,0,87,88,5,41,0,0,88,10,
        1,0,0,0,89,90,5,123,0,0,90,12,1,0,0,0,91,92,5,125,0,0,92,14,1,0,
        0,0,93,94,5,43,0,0,94,16,1,0,0,0,95,96,5,45,0,0,96,18,1,0,0,0,97,
        98,5,42,0,0,98,20,1,0,0,0,99,100,5,47,0,0,100,22,1,0,0,0,101,102,
        5,37,0,0,102,24,1,0,0,0,103,104,5,62,0,0,104,26,1,0,0,0,105,106,
        5,60,0,0,106,28,1,0,0,0,107,108,5,62,0,0,108,109,5,61,0,0,109,30,
        1,0,0,0,110,111,5,60,0,0,111,112,5,61,0,0,112,32,1,0,0,0,113,114,
        5,61,0,0,114,115,5,61,0,0,115,34,1,0,0,0,116,117,5,33,0,0,117,118,
        5,61,0,0,118,36,1,0,0,0,119,120,5,60,0,0,120,121,5,60,0,0,121,38,
        1,0,0,0,122,123,5,62,0,0,123,124,5,62,0,0,124,40,1,0,0,0,125,126,
        5,38,0,0,126,42,1,0,0,0,127,128,5,124,0,0,128,44,1,0,0,0,129,130,
        5,94,0,0,130,46,1,0,0,0,131,132,5,38,0,0,132,133,5,38,0,0,133,48,
        1,0,0,0,134,135,5,124,0,0,135,136,5,124,0,0,136,50,1,0,0,0,137,138,
        5,33,0,0,138,52,1,0,0,0,139,140,5,59,0,0,140,54,1,0,0,0,141,143,
        7,2,0,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,
        1,0,0,0,145,56,1,0,0,0,146,148,7,2,0,0,147,146,1,0,0,0,148,149,1,
        0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,157,1,0,0,0,151,153,5,
        46,0,0,152,154,7,2,0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,
        0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,151,1,0,0,0,157,158,1,
        0,0,0,158,58,1,0,0,0,159,160,7,1,0,0,160,60,1,0,0,0,161,162,5,105,
        0,0,162,163,5,110,0,0,163,164,5,116,0,0,164,62,1,0,0,0,165,166,5,
        102,0,0,166,167,5,108,0,0,167,168,5,111,0,0,168,169,5,97,0,0,169,
        170,5,116,0,0,170,64,1,0,0,0,171,172,5,99,0,0,172,173,5,104,0,0,
        173,174,5,97,0,0,174,175,5,114,0,0,175,66,1,0,0,0,176,177,5,99,0,
        0,177,178,5,111,0,0,178,179,5,110,0,0,179,180,5,115,0,0,180,181,
        5,116,0,0,181,68,1,0,0,0,182,184,7,3,0,0,183,182,1,0,0,0,184,185,
        1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,188,
        6,34,0,0,188,70,1,0,0,0,7,0,82,144,149,155,157,185,1,6,0,0
    ]

class Grammar_Project_2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    IDENTIFIER = 3
    LPAREN = 4
    RPAREN = 5
    LBRACE = 6
    RBRACE = 7
    PLUS = 8
    MINUS = 9
    MULT = 10
    DIV = 11
    MOD = 12
    GREATER_THAN = 13
    LESS_THAN = 14
    GREATER_EQUAL = 15
    LESS_EQUAL = 16
    EQUALS = 17
    NOT_EQUAL = 18
    SHIFT_LEFT = 19
    SHIFT_RIGHT = 20
    BITWISE_AND = 21
    BITWISE_OR = 22
    BITWISE_XOR = 23
    LOGICAL_AND = 24
    LOGICAL_OR = 25
    LOGICAL_NOT = 26
    SEMICOLON = 27
    INT = 28
    FLOAT = 29
    CHAR = 30
    INTTYPE = 31
    FLOATTYPE = 32
    CHARTYPE = 33
    CONST = 34
    WHITESPACE = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'main'", "'='", "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
            "'<<'", "'>>'", "'&'", "'|'", "'^'", "'&&'", "'||'", "'!'", 
            "';'", "'int'", "'float'", "'char'", "'const'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "GREATER_THAN", "LESS_THAN", 
            "GREATER_EQUAL", "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", 
            "SHIFT_RIGHT", "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", 
            "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", 
            "INTTYPE", "FLOATTYPE", "CHARTYPE", "CONST", "WHITESPACE" ]

    ruleNames = [ "T__0", "T__1", "IDENTIFIER", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "PLUS", "MINUS", "MULT", "DIV", "MOD", "GREATER_THAN", 
                  "LESS_THAN", "GREATER_EQUAL", "LESS_EQUAL", "EQUALS", 
                  "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", "BITWISE_AND", 
                  "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", "LOGICAL_OR", 
                  "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", "INTTYPE", 
                  "FLOATTYPE", "CHARTYPE", "CONST", "WHITESPACE" ]

    grammarFileName = "Grammar_Project_2.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


