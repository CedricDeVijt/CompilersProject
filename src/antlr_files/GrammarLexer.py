# Generated from grammars/Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,49,303,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,
        1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,5,39,
        231,8,39,10,39,12,39,234,9,39,3,39,236,8,39,1,40,4,40,239,8,40,11,
        40,12,40,240,1,40,1,40,4,40,245,8,40,11,40,12,40,246,3,40,249,8,
        40,1,41,1,41,1,41,1,41,1,42,4,42,256,8,42,11,42,12,42,257,1,42,1,
        42,1,43,1,43,5,43,264,8,43,10,43,12,43,267,9,43,1,44,1,44,1,44,1,
        45,1,45,1,45,1,46,1,46,3,46,277,8,46,1,47,1,47,1,47,1,47,5,47,283,
        8,47,10,47,12,47,286,9,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
        1,48,5,48,297,8,48,10,48,12,48,300,9,48,1,48,1,48,1,284,0,49,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
        95,48,97,49,1,0,7,1,0,49,57,1,0,48,57,3,0,48,57,65,90,97,122,3,0,
        9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,2,0,10,10,13,13,312,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,1,99,1,0,0,0,3,103,1,0,0,0,5,108,1,0,0,0,7,115,1,0,0,0,9,
        117,1,0,0,0,11,122,1,0,0,0,13,127,1,0,0,0,15,132,1,0,0,0,17,137,
        1,0,0,0,19,142,1,0,0,0,21,144,1,0,0,0,23,152,1,0,0,0,25,158,1,0,
        0,0,27,164,1,0,0,0,29,169,1,0,0,0,31,171,1,0,0,0,33,173,1,0,0,0,
        35,175,1,0,0,0,37,177,1,0,0,0,39,179,1,0,0,0,41,181,1,0,0,0,43,183,
        1,0,0,0,45,185,1,0,0,0,47,187,1,0,0,0,49,189,1,0,0,0,51,191,1,0,
        0,0,53,194,1,0,0,0,55,197,1,0,0,0,57,200,1,0,0,0,59,203,1,0,0,0,
        61,206,1,0,0,0,63,209,1,0,0,0,65,211,1,0,0,0,67,213,1,0,0,0,69,215,
        1,0,0,0,71,217,1,0,0,0,73,220,1,0,0,0,75,223,1,0,0,0,77,225,1,0,
        0,0,79,235,1,0,0,0,81,238,1,0,0,0,83,250,1,0,0,0,85,255,1,0,0,0,
        87,261,1,0,0,0,89,268,1,0,0,0,91,271,1,0,0,0,93,276,1,0,0,0,95,278,
        1,0,0,0,97,292,1,0,0,0,99,100,5,105,0,0,100,101,5,110,0,0,101,102,
        5,116,0,0,102,2,1,0,0,0,103,104,5,109,0,0,104,105,5,97,0,0,105,106,
        5,105,0,0,106,107,5,110,0,0,107,4,1,0,0,0,108,109,5,112,0,0,109,
        110,5,114,0,0,110,111,5,105,0,0,111,112,5,110,0,0,112,113,5,116,
        0,0,113,114,5,102,0,0,114,6,1,0,0,0,115,116,5,44,0,0,116,8,1,0,0,
        0,117,118,5,34,0,0,118,119,5,37,0,0,119,120,5,115,0,0,120,121,5,
        34,0,0,121,10,1,0,0,0,122,123,5,34,0,0,123,124,5,37,0,0,124,125,
        5,100,0,0,125,126,5,34,0,0,126,12,1,0,0,0,127,128,5,34,0,0,128,129,
        5,37,0,0,129,130,5,120,0,0,130,131,5,34,0,0,131,14,1,0,0,0,132,133,
        5,34,0,0,133,134,5,37,0,0,134,135,5,102,0,0,135,136,5,34,0,0,136,
        16,1,0,0,0,137,138,5,34,0,0,138,139,5,37,0,0,139,140,5,99,0,0,140,
        141,5,34,0,0,141,18,1,0,0,0,142,143,5,61,0,0,143,20,1,0,0,0,144,
        145,5,116,0,0,145,146,5,121,0,0,146,147,5,112,0,0,147,148,5,101,
        0,0,148,149,5,100,0,0,149,150,5,101,0,0,150,151,5,102,0,0,151,22,
        1,0,0,0,152,153,5,99,0,0,153,154,5,111,0,0,154,155,5,110,0,0,155,
        156,5,115,0,0,156,157,5,116,0,0,157,24,1,0,0,0,158,159,5,102,0,0,
        159,160,5,108,0,0,160,161,5,111,0,0,161,162,5,97,0,0,162,163,5,116,
        0,0,163,26,1,0,0,0,164,165,5,99,0,0,165,166,5,104,0,0,166,167,5,
        97,0,0,167,168,5,114,0,0,168,28,1,0,0,0,169,170,5,40,0,0,170,30,
        1,0,0,0,171,172,5,41,0,0,172,32,1,0,0,0,173,174,5,123,0,0,174,34,
        1,0,0,0,175,176,5,125,0,0,176,36,1,0,0,0,177,178,5,43,0,0,178,38,
        1,0,0,0,179,180,5,45,0,0,180,40,1,0,0,0,181,182,5,42,0,0,182,42,
        1,0,0,0,183,184,5,47,0,0,184,44,1,0,0,0,185,186,5,37,0,0,186,46,
        1,0,0,0,187,188,5,62,0,0,188,48,1,0,0,0,189,190,5,60,0,0,190,50,
        1,0,0,0,191,192,5,62,0,0,192,193,5,61,0,0,193,52,1,0,0,0,194,195,
        5,60,0,0,195,196,5,61,0,0,196,54,1,0,0,0,197,198,5,61,0,0,198,199,
        5,61,0,0,199,56,1,0,0,0,200,201,5,33,0,0,201,202,5,61,0,0,202,58,
        1,0,0,0,203,204,5,60,0,0,204,205,5,60,0,0,205,60,1,0,0,0,206,207,
        5,62,0,0,207,208,5,62,0,0,208,62,1,0,0,0,209,210,5,38,0,0,210,64,
        1,0,0,0,211,212,5,124,0,0,212,66,1,0,0,0,213,214,5,94,0,0,214,68,
        1,0,0,0,215,216,5,126,0,0,216,70,1,0,0,0,217,218,5,38,0,0,218,219,
        5,38,0,0,219,72,1,0,0,0,220,221,5,124,0,0,221,222,5,124,0,0,222,
        74,1,0,0,0,223,224,5,33,0,0,224,76,1,0,0,0,225,226,5,59,0,0,226,
        78,1,0,0,0,227,236,5,48,0,0,228,232,7,0,0,0,229,231,7,1,0,0,230,
        229,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,
        236,1,0,0,0,234,232,1,0,0,0,235,227,1,0,0,0,235,228,1,0,0,0,236,
        80,1,0,0,0,237,239,7,1,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,
        1,0,0,0,240,241,1,0,0,0,241,248,1,0,0,0,242,244,5,46,0,0,243,245,
        7,1,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,244,1,0,0,0,246,247,
        1,0,0,0,247,249,1,0,0,0,248,242,1,0,0,0,248,249,1,0,0,0,249,82,1,
        0,0,0,250,251,5,39,0,0,251,252,7,2,0,0,252,253,5,39,0,0,253,84,1,
        0,0,0,254,256,7,3,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,
        0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,6,42,0,0,260,86,1,
        0,0,0,261,265,7,4,0,0,262,264,7,5,0,0,263,262,1,0,0,0,264,267,1,
        0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,88,1,0,0,0,267,265,1,0,
        0,0,268,269,5,43,0,0,269,270,5,43,0,0,270,90,1,0,0,0,271,272,5,45,
        0,0,272,273,5,45,0,0,273,92,1,0,0,0,274,277,3,97,48,0,275,277,3,
        95,47,0,276,274,1,0,0,0,276,275,1,0,0,0,277,94,1,0,0,0,278,279,5,
        47,0,0,279,280,5,42,0,0,280,284,1,0,0,0,281,283,9,0,0,0,282,281,
        1,0,0,0,283,286,1,0,0,0,284,285,1,0,0,0,284,282,1,0,0,0,285,287,
        1,0,0,0,286,284,1,0,0,0,287,288,5,42,0,0,288,289,5,47,0,0,289,290,
        1,0,0,0,290,291,6,47,0,0,291,96,1,0,0,0,292,293,5,47,0,0,293,294,
        5,47,0,0,294,298,1,0,0,0,295,297,8,6,0,0,296,295,1,0,0,0,297,300,
        1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,301,1,0,0,0,300,298,
        1,0,0,0,301,302,6,48,0,0,302,98,1,0,0,0,11,0,232,235,240,246,248,
        257,265,276,284,298,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    LPAREN = 15
    RPAREN = 16
    LBRACE = 17
    RBRACE = 18
    PLUS = 19
    MINUS = 20
    MULT = 21
    DIV = 22
    MOD = 23
    GREATER_THAN = 24
    LESS_THAN = 25
    GREATER_EQUAL = 26
    LESS_EQUAL = 27
    EQUALS = 28
    NOT_EQUAL = 29
    SHIFT_LEFT = 30
    SHIFT_RIGHT = 31
    BITWISE_AND = 32
    BITWISE_OR = 33
    BITWISE_XOR = 34
    BITWISE_NOT = 35
    LOGICAL_AND = 36
    LOGICAL_OR = 37
    LOGICAL_NOT = 38
    SEMICOLON = 39
    INT = 40
    FLOAT = 41
    CHAR = 42
    WHITESPACE = 43
    IDENTIFIER = 44
    INCREMENT = 45
    DECREMENT = 46
    COMMENT = 47
    BLOCKCOMMENT = 48
    LINECOMMENT = 49

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'main'", "'printf'", "','", "'\"%s\"'", "'\"%d\"'", 
            "'\"%x\"'", "'\"%f\"'", "'\"%c\"'", "'='", "'typedef'", "'const'", 
            "'float'", "'char'", "'('", "')'", "'{'", "'}'", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", 
            "'<<'", "'>>'", "'&'", "'|'", "'^'", "'~'", "'&&'", "'||'", 
            "'!'", "';'", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
            "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
            "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "BITWISE_NOT", "LOGICAL_AND", 
            "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", 
            "WHITESPACE", "IDENTIFIER", "INCREMENT", "DECREMENT", "COMMENT", 
            "BLOCKCOMMENT", "LINECOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", 
                  "MULT", "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
                  "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
                  "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "BITWISE_NOT", 
                  "LOGICAL_AND", "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", 
                  "INT", "FLOAT", "CHAR", "WHITESPACE", "IDENTIFIER", "INCREMENT", 
                  "DECREMENT", "COMMENT", "BLOCKCOMMENT", "LINECOMMENT" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


