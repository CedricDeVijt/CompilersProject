# Generated from grammars/Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,295,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,
        15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,
        27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,
        32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,
        37,1,38,1,38,1,38,5,38,223,8,38,10,38,12,38,226,9,38,3,38,228,8,
        38,1,39,4,39,231,8,39,11,39,12,39,232,1,39,1,39,4,39,237,8,39,11,
        39,12,39,238,3,39,241,8,39,1,40,1,40,1,40,1,40,1,41,4,41,248,8,41,
        11,41,12,41,249,1,41,1,41,1,42,1,42,5,42,256,8,42,10,42,12,42,259,
        9,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,3,45,269,8,45,1,46,
        1,46,1,46,1,46,5,46,275,8,46,10,46,12,46,278,9,46,1,46,1,46,1,46,
        1,46,1,46,1,47,1,47,1,47,1,47,5,47,289,8,47,10,47,12,47,292,9,47,
        1,47,1,47,1,276,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,1,0,7,1,0,49,57,1,0,48,57,3,0,48,
        57,65,90,97,122,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,2,0,10,10,13,13,304,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,
        0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
        0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
        0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
        0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
        0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,
        0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,
        0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
        0,0,95,1,0,0,0,1,97,1,0,0,0,3,101,1,0,0,0,5,106,1,0,0,0,7,113,1,
        0,0,0,9,115,1,0,0,0,11,119,1,0,0,0,13,124,1,0,0,0,15,129,1,0,0,0,
        17,134,1,0,0,0,19,139,1,0,0,0,21,144,1,0,0,0,23,146,1,0,0,0,25,152,
        1,0,0,0,27,158,1,0,0,0,29,163,1,0,0,0,31,165,1,0,0,0,33,167,1,0,
        0,0,35,169,1,0,0,0,37,171,1,0,0,0,39,173,1,0,0,0,41,175,1,0,0,0,
        43,177,1,0,0,0,45,179,1,0,0,0,47,181,1,0,0,0,49,183,1,0,0,0,51,185,
        1,0,0,0,53,188,1,0,0,0,55,191,1,0,0,0,57,194,1,0,0,0,59,197,1,0,
        0,0,61,200,1,0,0,0,63,203,1,0,0,0,65,205,1,0,0,0,67,207,1,0,0,0,
        69,209,1,0,0,0,71,212,1,0,0,0,73,215,1,0,0,0,75,217,1,0,0,0,77,227,
        1,0,0,0,79,230,1,0,0,0,81,242,1,0,0,0,83,247,1,0,0,0,85,253,1,0,
        0,0,87,260,1,0,0,0,89,263,1,0,0,0,91,268,1,0,0,0,93,270,1,0,0,0,
        95,284,1,0,0,0,97,98,5,105,0,0,98,99,5,110,0,0,99,100,5,116,0,0,
        100,2,1,0,0,0,101,102,5,109,0,0,102,103,5,97,0,0,103,104,5,105,0,
        0,104,105,5,110,0,0,105,4,1,0,0,0,106,107,5,112,0,0,107,108,5,114,
        0,0,108,109,5,105,0,0,109,110,5,110,0,0,110,111,5,116,0,0,111,112,
        5,102,0,0,112,6,1,0,0,0,113,114,5,44,0,0,114,8,1,0,0,0,115,116,5,
        118,0,0,116,117,5,97,0,0,117,118,5,114,0,0,118,10,1,0,0,0,119,120,
        5,34,0,0,120,121,5,37,0,0,121,122,5,115,0,0,122,123,5,34,0,0,123,
        12,1,0,0,0,124,125,5,34,0,0,125,126,5,37,0,0,126,127,5,100,0,0,127,
        128,5,34,0,0,128,14,1,0,0,0,129,130,5,34,0,0,130,131,5,37,0,0,131,
        132,5,120,0,0,132,133,5,34,0,0,133,16,1,0,0,0,134,135,5,34,0,0,135,
        136,5,37,0,0,136,137,5,102,0,0,137,138,5,34,0,0,138,18,1,0,0,0,139,
        140,5,34,0,0,140,141,5,37,0,0,141,142,5,99,0,0,142,143,5,34,0,0,
        143,20,1,0,0,0,144,145,5,61,0,0,145,22,1,0,0,0,146,147,5,99,0,0,
        147,148,5,111,0,0,148,149,5,110,0,0,149,150,5,115,0,0,150,151,5,
        116,0,0,151,24,1,0,0,0,152,153,5,102,0,0,153,154,5,108,0,0,154,155,
        5,111,0,0,155,156,5,97,0,0,156,157,5,116,0,0,157,26,1,0,0,0,158,
        159,5,99,0,0,159,160,5,104,0,0,160,161,5,97,0,0,161,162,5,114,0,
        0,162,28,1,0,0,0,163,164,5,40,0,0,164,30,1,0,0,0,165,166,5,41,0,
        0,166,32,1,0,0,0,167,168,5,123,0,0,168,34,1,0,0,0,169,170,5,125,
        0,0,170,36,1,0,0,0,171,172,5,43,0,0,172,38,1,0,0,0,173,174,5,45,
        0,0,174,40,1,0,0,0,175,176,5,42,0,0,176,42,1,0,0,0,177,178,5,47,
        0,0,178,44,1,0,0,0,179,180,5,37,0,0,180,46,1,0,0,0,181,182,5,62,
        0,0,182,48,1,0,0,0,183,184,5,60,0,0,184,50,1,0,0,0,185,186,5,62,
        0,0,186,187,5,61,0,0,187,52,1,0,0,0,188,189,5,60,0,0,189,190,5,61,
        0,0,190,54,1,0,0,0,191,192,5,61,0,0,192,193,5,61,0,0,193,56,1,0,
        0,0,194,195,5,33,0,0,195,196,5,61,0,0,196,58,1,0,0,0,197,198,5,60,
        0,0,198,199,5,60,0,0,199,60,1,0,0,0,200,201,5,62,0,0,201,202,5,62,
        0,0,202,62,1,0,0,0,203,204,5,38,0,0,204,64,1,0,0,0,205,206,5,124,
        0,0,206,66,1,0,0,0,207,208,5,94,0,0,208,68,1,0,0,0,209,210,5,38,
        0,0,210,211,5,38,0,0,211,70,1,0,0,0,212,213,5,124,0,0,213,214,5,
        124,0,0,214,72,1,0,0,0,215,216,5,33,0,0,216,74,1,0,0,0,217,218,5,
        59,0,0,218,76,1,0,0,0,219,228,5,48,0,0,220,224,7,0,0,0,221,223,7,
        1,0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,
        0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,227,219,1,0,0,0,227,220,1,
        0,0,0,228,78,1,0,0,0,229,231,7,1,0,0,230,229,1,0,0,0,231,232,1,0,
        0,0,232,230,1,0,0,0,232,233,1,0,0,0,233,240,1,0,0,0,234,236,5,46,
        0,0,235,237,7,1,0,0,236,235,1,0,0,0,237,238,1,0,0,0,238,236,1,0,
        0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,234,1,0,0,0,240,241,1,0,
        0,0,241,80,1,0,0,0,242,243,5,39,0,0,243,244,7,2,0,0,244,245,5,39,
        0,0,245,82,1,0,0,0,246,248,7,3,0,0,247,246,1,0,0,0,248,249,1,0,0,
        0,249,247,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,251,252,6,41,0,
        0,252,84,1,0,0,0,253,257,7,4,0,0,254,256,7,5,0,0,255,254,1,0,0,0,
        256,259,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,86,1,0,0,0,259,
        257,1,0,0,0,260,261,5,43,0,0,261,262,5,43,0,0,262,88,1,0,0,0,263,
        264,5,45,0,0,264,265,5,45,0,0,265,90,1,0,0,0,266,269,3,95,47,0,267,
        269,3,93,46,0,268,266,1,0,0,0,268,267,1,0,0,0,269,92,1,0,0,0,270,
        271,5,47,0,0,271,272,5,42,0,0,272,276,1,0,0,0,273,275,9,0,0,0,274,
        273,1,0,0,0,275,278,1,0,0,0,276,277,1,0,0,0,276,274,1,0,0,0,277,
        279,1,0,0,0,278,276,1,0,0,0,279,280,5,42,0,0,280,281,5,47,0,0,281,
        282,1,0,0,0,282,283,6,46,0,0,283,94,1,0,0,0,284,285,5,47,0,0,285,
        286,5,47,0,0,286,290,1,0,0,0,287,289,8,6,0,0,288,287,1,0,0,0,289,
        292,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,293,1,0,0,0,292,
        290,1,0,0,0,293,294,6,47,0,0,294,96,1,0,0,0,11,0,224,227,232,238,
        240,249,257,268,276,290,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    LPAREN = 15
    RPAREN = 16
    LBRACE = 17
    RBRACE = 18
    PLUS = 19
    MINUS = 20
    MULT = 21
    DIV = 22
    MOD = 23
    GREATER_THAN = 24
    LESS_THAN = 25
    GREATER_EQUAL = 26
    LESS_EQUAL = 27
    EQUALS = 28
    NOT_EQUAL = 29
    SHIFT_LEFT = 30
    SHIFT_RIGHT = 31
    BITWISE_AND = 32
    BITWISE_OR = 33
    BITWISE_XOR = 34
    LOGICAL_AND = 35
    LOGICAL_OR = 36
    LOGICAL_NOT = 37
    SEMICOLON = 38
    INT = 39
    FLOAT = 40
    CHAR = 41
    WHITESPACE = 42
    IDENTIFIER = 43
    INCREMENT = 44
    DECREMENT = 45
    COMMENT = 46
    BLOCKCOMMENT = 47
    LINECOMMENT = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'main'", "'printf'", "','", "'var'", "'\"%s\"'", "'\"%d\"'", 
            "'\"%x\"'", "'\"%f\"'", "'\"%c\"'", "'='", "'const'", "'float'", 
            "'char'", "'('", "')'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'>'", "'<'", "'>='", "'<='", "'=='", "'!='", "'<<'", 
            "'>>'", "'&'", "'|'", "'^'", "'&&'", "'||'", "'!'", "';'", "'++'", 
            "'--'" ]

    symbolicNames = [ "<INVALID>",
            "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
            "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
            "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", "LOGICAL_OR", 
            "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", "CHAR", "WHITESPACE", 
            "IDENTIFIER", "INCREMENT", "DECREMENT", "COMMENT", "BLOCKCOMMENT", 
            "LINECOMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "PLUS", "MINUS", 
                  "MULT", "DIV", "MOD", "GREATER_THAN", "LESS_THAN", "GREATER_EQUAL", 
                  "LESS_EQUAL", "EQUALS", "NOT_EQUAL", "SHIFT_LEFT", "SHIFT_RIGHT", 
                  "BITWISE_AND", "BITWISE_OR", "BITWISE_XOR", "LOGICAL_AND", 
                  "LOGICAL_OR", "LOGICAL_NOT", "SEMICOLON", "INT", "FLOAT", 
                  "CHAR", "WHITESPACE", "IDENTIFIER", "INCREMENT", "DECREMENT", 
                  "COMMENT", "BLOCKCOMMENT", "LINECOMMENT" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


