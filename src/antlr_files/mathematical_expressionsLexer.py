# Generated from grammars/mathematical_expressions.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,125,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,4,0,53,
        8,0,11,0,12,0,54,1,0,1,0,4,0,59,8,0,11,0,12,0,60,3,0,63,8,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,
        1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,1,
        18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,4,24,120,
        8,24,11,24,12,24,121,1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,2,1,0,48,57,3,0,9,
        10,13,13,32,32,128,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,1,52,1,0,0,0,3,64,1,0,0,0,5,66,1,0,0,0,7,68,1,0,0,
        0,9,70,1,0,0,0,11,72,1,0,0,0,13,74,1,0,0,0,15,76,1,0,0,0,17,78,1,
        0,0,0,19,81,1,0,0,0,21,84,1,0,0,0,23,87,1,0,0,0,25,90,1,0,0,0,27,
        93,1,0,0,0,29,96,1,0,0,0,31,98,1,0,0,0,33,101,1,0,0,0,35,104,1,0,
        0,0,37,106,1,0,0,0,39,108,1,0,0,0,41,110,1,0,0,0,43,112,1,0,0,0,
        45,114,1,0,0,0,47,116,1,0,0,0,49,119,1,0,0,0,51,53,7,0,0,0,52,51,
        1,0,0,0,53,54,1,0,0,0,54,52,1,0,0,0,54,55,1,0,0,0,55,62,1,0,0,0,
        56,58,5,46,0,0,57,59,7,0,0,0,58,57,1,0,0,0,59,60,1,0,0,0,60,58,1,
        0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,56,1,0,0,0,62,63,1,0,0,0,63,
        2,1,0,0,0,64,65,5,43,0,0,65,4,1,0,0,0,66,67,5,45,0,0,67,6,1,0,0,
        0,68,69,5,42,0,0,69,8,1,0,0,0,70,71,5,47,0,0,71,10,1,0,0,0,72,73,
        5,37,0,0,73,12,1,0,0,0,74,75,5,62,0,0,75,14,1,0,0,0,76,77,5,60,0,
        0,77,16,1,0,0,0,78,79,5,61,0,0,79,80,5,61,0,0,80,18,1,0,0,0,81,82,
        5,62,0,0,82,83,5,61,0,0,83,20,1,0,0,0,84,85,5,60,0,0,85,86,5,61,
        0,0,86,22,1,0,0,0,87,88,5,33,0,0,88,89,5,61,0,0,89,24,1,0,0,0,90,
        91,5,38,0,0,91,92,5,38,0,0,92,26,1,0,0,0,93,94,5,124,0,0,94,95,5,
        124,0,0,95,28,1,0,0,0,96,97,5,33,0,0,97,30,1,0,0,0,98,99,5,60,0,
        0,99,100,5,60,0,0,100,32,1,0,0,0,101,102,5,62,0,0,102,103,5,62,0,
        0,103,34,1,0,0,0,104,105,5,38,0,0,105,36,1,0,0,0,106,107,5,124,0,
        0,107,38,1,0,0,0,108,109,5,126,0,0,109,40,1,0,0,0,110,111,5,94,0,
        0,111,42,1,0,0,0,112,113,5,40,0,0,113,44,1,0,0,0,114,115,5,41,0,
        0,115,46,1,0,0,0,116,117,5,59,0,0,117,48,1,0,0,0,118,120,7,1,0,0,
        119,118,1,0,0,0,120,121,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,
        122,123,1,0,0,0,123,124,6,24,0,0,124,50,1,0,0,0,5,0,54,60,62,121,
        1,6,0,0
    ]

class mathematical_expressionsLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INTEGER = 1
    PLUS = 2
    MINUS = 3
    MULTIPLY = 4
    DIVIDE = 5
    MODULO = 6
    GT = 7
    LT = 8
    EQ = 9
    GTE = 10
    LTE = 11
    NEQ = 12
    AND = 13
    OR = 14
    NOT = 15
    LSHIFT = 16
    RSHIFT = 17
    BIT_AND = 18
    BIT_OR = 19
    BIT_NOT = 20
    BIT_XOR = 21
    LPAREN = 22
    RPAREN = 23
    SEMICOLON = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", "'=='", "'>='", 
            "'<='", "'!='", "'&&'", "'||'", "'!'", "'<<'", "'>>'", "'&'", 
            "'|'", "'~'", "'^'", "'('", "')'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "INTEGER", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
            "GT", "LT", "EQ", "GTE", "LTE", "NEQ", "AND", "OR", "NOT", "LSHIFT", 
            "RSHIFT", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", "LPAREN", 
            "RPAREN", "SEMICOLON", "WS" ]

    ruleNames = [ "INTEGER", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
                  "GT", "LT", "EQ", "GTE", "LTE", "NEQ", "AND", "OR", "NOT", 
                  "LSHIFT", "RSHIFT", "BIT_AND", "BIT_OR", "BIT_NOT", "BIT_XOR", 
                  "LPAREN", "RPAREN", "SEMICOLON", "WS" ]

    grammarFileName = "mathematical_expressions.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


